import java.nio.file.*

def noAlignmentConfig =
"""
The file 'alignment.config' does not exist. This contains information about the
species being aligned to and is generated by the kick start application.

Please run kick start again to recreate the file, or create it yourself. It needs
to contain:

params {
    species = '<species folder name>'
    shortSpecies = '<species abbreviation>'
    assembly = '<reference assembly number>'
}

"species folder name" is the top level directory, e.g. "homo_sapiens".
"species abbreviation" is the short code for the species, e.g. "hsa" for homo sapiens.
"reference assembly number" is the release number for the genome, e.g. "GRCh38".
"""

manifest {
    name = 'crukci-bioinformatics/nf-alignment'
    author = 'Richard Bowers'
    homePage = 'https://github.com/crukci-bioinformatics/nf-alignment'
    description = 'Alignment including sample merging for CRUK-CI use only'
    mainScript = 'alignment.nf'
    nextflowVersion = '>=20.10.0'
    version = '4.0.0'
}

// https://www.nextflow.io/docs/latest/tracing.html
timeline {
    enabled = true
    file = "reports/execution_timeline.html"
}
report {
    enabled = true
    file = "reports/execution_report.html"
}
trace {
    enabled = true
    file = "reports/execution_trace.txt"
}
dag {
    enabled = true
    file = "reports/pipeline_dag.svg"
}

// https://www.nextflow.io/docs/latest/config.html?highlight=nextflow%20config#scope-executor
executor {
    $slurm {
        queueSize = 150
        pollInterval = '30sec'
        queue = 'general'
        clusterOptions = "--nodes=1 --open-mode=truncate"
    }
}

process.container = "work/alignment40.sif"
singularity.enabled = true
singularity.autoMounts = false

// https://www.nextflow.io/docs/latest/config.html?highlight=nextflow%20config#config-profiles

profiles {
    standard {
        params.referenceRoot = '/mnt/scratchb/bioinformatics/reference_data/reference_genomes'
        singularity.runOptions = "--bind '${launchDir}' --bind '${params.referenceRoot}:/reference_data:ro'"
        process.executor = 'local'
        executor.$local.cpus = 6
        executor.$local.memory = 20.GB
    }

    cluster {
        params.referenceRoot = '/mnt/scratchb/bioinformatics/reference_data/reference_genomes'
        singularity.runOptions = "--bind '${launchDir}' --bind '${params.referenceRoot}:/reference_data:ro'"
        process.executor = 'slurm'
    }

    bioinf {
        params.referenceRoot = '/data/reference_data/scratchb/reference_genomes'
        singularity.runOptions = "--bind '${launchDir}' --bind '${params.referenceRoot}:/reference_data:ro'"
        process.executor = 'local'
        executor.$local.cpus = 28
        executor.$local.memory = 180.GB
    }
}

process {
    errorStrategy = {
        task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish'
    }

    withLabel:bwa {
        cpus = 1
        memory = { 4.GB * task.attempt }
        time = { 2.hour + 2.hour * task.attempt }
        maxRetries = 2
    }

    withLabel:picard {
       cpus = 1
       memory = { 4.GB * 2 ** (task.attempt - 1) } // So 4, 8, 16 etc
       time = { 4.hour * task.attempt }
       maxRetries = 2
    }

    withLabel:coverage {
        cpus = 1
        memory = { 2.GB * task.attempt }
        time = { 2.hour * task.attempt }
        maxRetries = 2
    }
}

params {
    // Defaults if not defined in "alignment.config".
    markDuplicates = false
    mergeSamples = false
    createCoverage = false

    // Size of chunks for BWA & BWA-mem2.
    chunkSize = 1000000

    // Due to the size of FASTQ data and how well it compresses, we'd normally want to
    // compress chunks of FASTQ. However, this does somewhat slow the pipeline down so
    // for development, write uncompressed FASTQ.
    compressSplitFastq = true

    // This will normally be on, but WGS metrics is quite slow so for development
    // work it's best to disable it.
    wgsMetrics = true

    // The default pattern and capture group for identifying a base name from CRUK-CI
    // FASTQ files. If any other file naming pattern is used, this will be set in
    // alignment.config.
    basenameExtractPattern = /(SLX-\d+\.\w+\.[-\w]+\.s_\d)\.r_\d+\.fq\.gz/
    basenameCaptureGroup = 1

    // Directory for FASTQ files. The default is just "fastq" in the pipeline directory.
    fastqDir = "fastq"

    // Directories for aligned files and merged sample BAMs.
    bamDir = "bam"
    sampleBamDir = "samplebam"


    // Software versions.
    bwaVersion = "0.7.17"
    bwamem2Version = "2.1"
    starVersion = "2.7.7a"
    samtoolsVersion = "1.11"
    picardVersion = "2.9.5"
    bedtoolsVersion = "2.29.2"

    // Software paths (inside the container).
    java = "/usr/lib/jvm/jre-11/bin/java"
    bwa = "/opt/bwa-${bwaVersion}/bwa"
    bwamem2 = "/opt/bwa-mem2-${bwamem2Version}/bwa-mem2"
    star = "/opt/STAR-${starVersion}/bin/Linux_x86_64/STAR"
    samtools = "/opt/samtools-${samtoolsVersion}/bin/samtools"
    picard = "/opt/picard-${picardVersion}.jar"
    bedtools = "/opt/bedtools-${bedtoolsVersion}/bin"
    ucsctools = "/opt/ucsc_tools"
}

try
{
    includeConfig "${launchDir}/alignment.config"
}
catch (NoSuchFileException e)
{
    // We'll check for missing mandatory parameters as the pipeline attempts to start.
}

timeline {
    enabled = true
    file = "reports/execution_timeline.html"
}
report {
    enabled = true
    file = "reports/execution_report.html"
}
trace {
    enabled = true
    file = "reports/execution_trace.txt"
}
dag {
    enabled = true
    file = "reports/pipeline_dag.svg"
}
